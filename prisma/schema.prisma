// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
  url      = env("POSTGRES_URL")
  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Prelisting {
  id String @id @default(uuid())
  form Form?
  feedback FeedBack?  
  title String
  description String
  complete Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields:[userId],references:[id])
  userId String
}
model Form {
  id String @id @default(uuid())
  prelistingId String @unique
  prelisting Prelisting @relation(fields:[prelistingId],references:[id], onDelete: Cascade)
  date DateTime @default(now())
  asesor String
  proprietario String
  email String @unique
  celular BigInt
  fechadenacimiento DateTime?
  whysell String?
  ocupacion Boolean?
  selltobuy Boolean?
  solvebeforesell solveEnum?
  otrosolvebeforesell String?
  includedinsell includeEnum?
  otrosincludedinsell String?
  whenneedtomove DateTime?
  whyneedtomove whyEnum?
  otrosneedtomove String?
  neighbors String?
  neighborhood String?
  typeoperation typeEnum?
  otrotypeoperation String?
  direccion String?
  propertytype propEnum?
  otropropertytype String?
  ambientes Int?
  orientacion orientEnum?
  impuestos Int?
  expensas Int?
  servicios String?
  valoralquiler Int?
  valorventa Int?
  antiguedad Int?
  estado estadoEnum?
  heattype heatEnum?
  plantas Int?
  cocheras Int?
  banos Int?
  toilette Int?
  dormitorio Int?
  dormitorioserv Boolean?
  amenities Boolean?
  baulera Boolean?
  cantascensores Int?
  categoria catEnum?
  mlivinga Decimal? 
  mlivingl Decimal? 
  mcomedora Decimal? 
  mcomedorl Decimal? 
  mcocinaa Decimal? 
  mcocinal Decimal? 
  mdorm1a Decimal? 
  mdorm1l Decimal? 
  mdorm2a Decimal? 
  mdorm2l Decimal? 
  mdorm3a Decimal? 
  mdorm3l Decimal? 
  mdorm4a Decimal? 
  mdorm4l Decimal? 
  mdorm5a Decimal?
  mdorm5l Decimal?
  mlava Decimal? 
  mlavl Decimal? 
  mhalla Decimal? 
  mhalll Decimal? 
  mbanos1a Decimal? 
  mbanos1l Decimal?
  mbanos2a Decimal? 
  mbanos2l Decimal? 
  mbanos3a Decimal? 
  mbanos3l Decimal? 
  mbanos4a Decimal? 
  mbanos4l Decimal? 
  mbanos5a Decimal? 
  mbanos5l Decimal?
  mtoilette1a Decimal?
  mtoilette1l Decimal?
  mtoilette2a Decimal?
  mtoilette2l Decimal?
  mtoilette3a Decimal?
  mtoilette3l Decimal?
  mtoilette4a Decimal?
  mtoilette4l Decimal?
  mcocha Decimal? 
  mcochl Decimal? 
  mpiletaa Decimal? 
  mpiletal Decimal? 
  mquinchoa Decimal? 
  mquinchol Decimal? 
  msemicubiertoa Decimal? 
  msemicubiertol Decimal? 
 motrosespaciosa Decimal?
  motrosespaciosl Decimal?
  escritura Boolean?
  plano Boolean?
  finalobra Boolean?
  comentarios String?
}
enum catEnum{
  Altonivel
  excelente
  muybueno
  bueno
  regular
}
enum heatEnum{
  losaradiante
  radiadores
  splitfc
  central
  calefactores
  sin
}
enum estadoEnum{
  bueno 
  construccion
  estrenar
  excelente
  muybueno
  reciclado
  refaccionar
  regular
  pozo
  otro

}
enum orientEnum{
  N
  NO
  O
  SO
  S
  SE
  E
  NE
}
enum solveEnum{
  hipoteca
  inhibiciones
  matrimonio
  otros
}
enum includeEnum{
  muebles
  cortinas
  aires
  luces
  otros
}
enum whyEnum{
  divorcio
  economico
  mudanza
  otros
}
enum typeEnum{
  alquiler
  venta
  alquilertemporario
  ventayalquiler
  ventayalqtemp
  otros
}
enum propEnum{
  dpto
  casa
  galpon
  local
  negocio
  ph
  cochera
  oficina
  lote
  edificio
  quinta
  campo
  otro
}
model FeedBack{
  id String @id @default(uuid())
  prelistingId String @unique
  prelisting Prelisting @relation(fields:[prelistingId],references:[id], onDelete: Cascade)
  asesorCaptador String
  asesorVendedor String
  date DateTime @default(now())
  valoracion valoracionEnum?
  feedUbicacion feedubicacionEnum?
  feedInmueble feedInmuebleEnum?
  feedEstado feedEstadoEnum?
  masgusto String?
  menosgusto String?
  oferta Boolean
  otrasOpiniones String?
}
enum feedEstadoEnum{
  Muy_bueno
  Bueno
  Regular
  Malo
  Muy_malo
}
enum feedInmuebleEnum{
   Muy_bueno
  Bueno
  Regular
  Malo
  Muy_malo
}
enum feedubicacionEnum{
  Muy_bueno
  Bueno
  Regular
  Malo
  Muy_malo
}
enum valoracionEnum{
  Muy_bueno
  Bueno
  Regular
  Malo
  Muy_malo

}
model User {
  id            String          @id @default(uuid())
  name          String?
  password String?
  roles         String[] @default(["user"])
  isActive      Boolean  @default(true)
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  prelisting Prelisting[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}