import * as z from "zod";
export const formSchema = z
  .object({
    date: z.string().refine((val) => !isNaN(Date.parse(val)), {
      message: "Invalid date format",
    }),
    asesor: z.string(),
    proprietario: z.string(),
    email: z.string().email().min(5),
    celular: z.number().nonnegative(),
    fechadenacimiento: z.string().refine((val) => !isNaN(Date.parse(val)), {
      message: "Invalid date format",
    }),
    whysell: z.string(),
    ocupacion: z.boolean(),
    selltobuy: z.boolean(),
    solvebeforesell: z.enum([
      "hipoteca",
      "inhibiciones",
      "matrimonio",
      "otros",
      "libre Venta",
    ]),
    otrosolvebeforesell: z.string(),
    includedinsell: z.enum(["muebles", "cortinas", "aires", "luces", "otros"]),
    otrosincludedinsell: z.string(),
    whenneedtomove: z.string().refine((val) => !isNaN(Date.parse(val)), {
      message: "Invalid date format",
    }),
    whyneedtomove: z.enum(["divorcio", "economico", "mudanza", "otros"]),
    otrosneedtomove: z.string(),
    neighbors: z.string(),
    neighborhood: z.string(),
    typeoperation: z.enum([
      "alquiler",
      "venta",
      "alquilertemporario",
      "ventayalquiler",
      "ventayalqtemp",
      "otros",
    ]),
    otrotypeoperation: z.string(),
    direccion: z.string(),
    propertytype: z.enum([
      "dpto",
      "casa",
      "galpon",
      "local",
      "negocio",
      "ph",
      "cochera",
      "oficina",
      "lote",
      "edificio",
      "quinta",
      "campo",
      "otro",
    ]),
    otropropertytype: z.string(),
    ambientes: z.number().nonnegative(),
    orientacion: z.enum(["N", "NO", "O", "SO", "S", "SE", "E", "NE"]),
    impuestos: z.number().nonnegative(),
    expensas: z.number().nonnegative(),
    servicios: z.string(),
    valoralquiler: z.number().nonnegative(),
    valorventa: z.number().nonnegative(),
    antiguedad: z.number().nonnegative(),
    estado: z.enum([
      "bueno",
      "construccion",
      "estrenar",
      "excelente",
      "muybueno",
      "reciclado",
      "refaccionar",
      "regular",
      "pozo",
      "otro",
    ]),
    heattype: z.enum([
      "losaradiante",
      "radiadores",
      "calefactores",
      "splitfc",
      "central",
      "sin",
    ]),
    plantas: z.number().nonnegative(),
    cocheras: z.number().nonnegative(),
    banos: z.number().min(0).max(5),
    toilette: z.number().min(0).max(4),
    dormitorio: z.number().min(0).max(5),
    dormitorioserv: z.boolean(),
    amenities: z.boolean(),
    baulera: z.boolean(),
    cantascensores: z.number().optional(),
    categoria: z.enum([
      "Altonivel",
      "excelente",
      "muybueno",
      "bueno",
      "regular",
    ]),
    mlivinga: z.number().nonnegative(),
    mlivingl: z.number().nonnegative(),
    mcomedora: z.number().nonnegative(),
    mcomedorl: z.number().nonnegative(),
    mcocinaa: z.number().nonnegative(),
    mcocinal: z.number().nonnegative(),
    mdorm1a: z.number().nonnegative().optional(),
    mdorm1l: z.number().nonnegative().optional(),
    mdorm2a: z.number().nonnegative().optional(),
    mdorm2l: z.number().nonnegative().optional(),
    mdorm3a: z.number().nonnegative().optional(),
    mdorm3l: z.number().nonnegative().optional(),
    mdorm4a: z.number().nonnegative().optional(),
    mdorm4l: z.number().nonnegative().optional(),
    mdorm5a: z.number().nonnegative().optional(),
    mdorm5l: z.number().nonnegative().optional(),

    mlava: z.number().nonnegative(),
    mlavl: z.number().nonnegative(),
    mhalla: z.number().nonnegative(),
    mhalll: z.number().nonnegative(),
    mbanos1a: z.number().nonnegative().optional(),
    mbanos1l: z.number().nonnegative().optional(),
    mbanos2a: z.number().nonnegative().optional(),
    mbanos2l: z.number().nonnegative().optional(),
    mbanos3a: z.number().nonnegative().optional(),
    mbanos3l: z.number().nonnegative().optional(),
    mbanos4a: z.number().nonnegative().optional(),
    mbanos4l: z.number().nonnegative().optional(),
    mbanos5a: z.number().nonnegative().optional(),
    mbanos5l: z.number().nonnegative().optional(),
    mtoilette1a: z.number().nonnegative().optional(),
    mtoilette1l: z.number().nonnegative().optional(),
    mtoilette2a: z.number().nonnegative().optional(),
    mtoilette2l: z.number().nonnegative().optional(),
    mtoilette3a: z.number().nonnegative().optional(),
    mtoilette3l: z.number().nonnegative().optional(),
    mtoilette4a: z.number().nonnegative().optional(),
    mtoilette4l: z.number().nonnegative().optional(),
    mcocha: z.number().nonnegative(),
    mcochl: z.number().nonnegative(),
    mpiletaa: z.number().nonnegative(),
    mpiletal: z.number().nonnegative(),
    mquinchoa: z.number().nonnegative(),
    mquinchol: z.number().nonnegative(),
    motrosespaciosa: z.number().nonnegative().optional(),
    motrosespaciosl: z.number().nonnegative().optional(),
    msemicubiertoa: z.number().nonnegative(),
    msemicubiertol: z.number().nonnegative(),
    escritura: z.boolean(),
    plano: z.boolean(),
    finalobra: z.boolean(),
    comentarios: z.string(),
  })
  .refine((data) => {
    return true;
  });
const validateEmailExists = async (email: string): Promise<boolean> => {
  // Replace this with actual API call or database query
  const response = await fetch(
    `/api/check-email?email=${encodeURIComponent(email)}`
  );
  const result = await response.json();
  return result.exists;
};
